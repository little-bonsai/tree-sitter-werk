# empty match
let input = "a";
let result = input
    | match {}
    | assert-eq "a"

# empty match
let input = [];
let result = input
    | match {}
    | assert-eq []

# match maps the string
let input = "foo.c"
let result = input
    | match {
        "%.c" => "{%}.o"
    }
    | assert-eq "foo.o"

# mismatch falls back to the input value
let input = "foo.cpp"
let result = input
    | match {
        "%.c" => "{%}.o"
    }
    | assert-eq "foo.cpp"

# explicit fallback
let input = "foo.cpp"
let result = input
    | match {
        "%.c" => "{%}.o"
        "%" => "fallback"
    }
    | assert-eq "fallback"

# implicit fallback
let result = "foo.cpp"
    | match {
        "%" => "{}"
    }
    | assert-eq "foo.cpp"

# fallback not hit
let input = "foo.c"
let result = input
    | match {
        "%.c" => "{%}.o"
        "%" => "fallback"
    }
    | assert-eq "foo.o"

# recursive preserves structure
let input = ["a.c", ["b.c", ["c.c", "d.c"]]]
    | match {
        "%.c" => "{%}.o"
    }
    | assert-eq ["a.o", ["b.o", ["c.o", "d.o"]]]
